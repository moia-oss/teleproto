/*
 * Copyright 2019 MOIA GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.moia.protos.teleproto

/** Models a migration between a Protocol Buffers model in different versions `P` and `Q` that may never fail. It's not specified by the
  * definition if `P` is newer/older that `Q`. Both are possible. Just by application of `read` (`P` < `Q`) and `write` (`Q` < `P`) the
  * direction is defined.
  *
  * Migrations can be (partly) generated by `ProtocolBuffers.migration[P, Q](...)`.
  */
final case class Migration[P, Q](migrate: P => Q) {

  /** Create a reader directly from older version `P` to `M` if reader for the newer version `Q` exists:
    *
    *   - Use the migration from `P` to `Q`
    *   - Apply the result `Q` to the existing reader to `M`
    */
  def reader[M](implicit newReader: Reader[Q, M]): Reader[P, M] =
    (oldProtobuf: P) => newReader.read(migrate(oldProtobuf))

  /** Create a writer directly from `M` to older version `Q` if writer for the newer version `P` exists:
    *
    *   - Write the `M` to a newer `P`
    *   - Use the migration from `P` to `Q`
    */
  def writer[M](implicit newWriter: Writer[M, P]): Writer[M, Q] =
    (model: M) => migrate(newWriter.write(model))
}
